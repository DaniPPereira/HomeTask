name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_IMAGE: user-service
  DOCKER_TAG: latest

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./User_Service
  #   steps:
  #     - uses: actions/checkout@v2
      
  #     - name: Debug - Print Working Directory
  #       run: |
  #         pwd
  #         ls -la
  #         echo "Current directory structure:"
  #         tree -a
      
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '18'
          
  #     - name: Install dependencies
  #       run: npm ci
          
  #     - name: Run tests
  #       run: npm test

  build-and-push:
    # needs: test    # Comentado pois o job de teste está comentado
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service_dir: User_Service
            image_name: user-service
          - service_dir: Shopping_Service
            image_name: shopping-service
          - service_dir: Home_Task_Service
            image_name: home-task-service
    steps:
      - uses: actions/checkout@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: pereira6
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
          
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.service_dir }}
          push: true
          tags: pereira6/${{ matrix.image_name }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
      
      - name: Set up Minikube
        uses: medyagh/setup-minikube@master
      
      - name: Deploy to Minikube
        run: |
          minikube start
          
          # Deploy databases first
          echo "Deploying databases..."
          kubectl apply -f kubernetes/user-service/postgres.yaml
          kubectl apply -f kubernetes/shopping-service/postgres.yaml
          kubectl apply -f kubernetes/home-task-service/postgres.yaml
          
          # Wait for databases to be ready
          echo "Waiting for databases to be ready..."
          kubectl wait --for=condition=ready pod -l app=postgres-user --timeout=120s
          kubectl wait --for=condition=ready pod -l app=postgres-shopping --timeout=120s
          kubectl wait --for=condition=ready pod -l app=postgres-hometask --timeout=120s
          
          # Deploy services
          echo "Deploying services..."
          kubectl apply -f kubernetes/user-service/deployment.yaml
          kubectl apply -f kubernetes/shopping-service/deployment.yaml
          kubectl apply -f kubernetes/home-task-service/deployment.yaml
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          kubectl wait --for=condition=ready pod -l app=user-service --timeout=120s
          kubectl wait --for=condition=ready pod -l app=shopping-service --timeout=120s
          kubectl wait --for=condition=ready pod -l app=home-task-service --timeout=120s
          
          # Show status
          echo "Deployment complete. Showing status:"
          kubectl get pods
          kubectl get services
      - name: Test Services
        run: |
          # Esperar serviços estarem prontos
          echo "Waiting for services to be ready..."
          kubectl wait --for=condition=ready pod -l app=user-service --timeout=300s
          kubectl wait --for=condition=ready pod -l app=shopping-service --timeout=300s
          kubectl wait --for=condition=ready pod -l app=home-task-service --timeout=300s
          
          # Diagnóstico de rede
          echo "=== Network Diagnostics ==="
          echo "1. Minikube Status:"
          minikube status
          
          echo "2. Node IP and Info:"
          kubectl get nodes -o wide
          
          echo "3. Service Details:"
          kubectl describe services user-service shopping-service home-task-service
          
          echo "4. Pod Details:"
          kubectl describe pods -l app=user-service
          kubectl describe pods -l app=shopping-service
          kubectl describe pods -l app=home-task-service
          
          # Tentar diferentes métodos de acesso
          echo "=== Testing Services ==="
          
          echo "1. Via minikube service URLs:"
          USER_URL=$(minikube service user-service --url)
          SHOPPING_URL=$(minikube service shopping-service --url)
          HOMETASK_URL=$(minikube service home-task-service --url)
          
          echo "User Service URL: $USER_URL"
          echo "Shopping Service URL: $SHOPPING_URL"
          echo "Home Task Service URL: $HOMETASK_URL"
          
          echo "2. Testing User Service..."
          curl -v "$USER_URL/api/user/" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "Test User",
              "email": "test@example.com",
              "password": "Test@123",
              "roles": "user"
            }' || true
          
          echo "3. Testing Shopping Service..."
          curl -v "$SHOPPING_URL/api/shopping/" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "Test Item",
              "quantity": 1
            }' || true
          
          echo "4. Testing Home Task Service..."
          curl -v "$HOMETASK_URL/api/tasks/" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "Test Task",
              "description": "Test Description"
            }' || true
          
          # Verificar logs para diagnóstico
          echo "=== Service Logs ==="
          echo "User Service Logs:"
          kubectl logs -l app=user-service
          
          echo "Shopping Service Logs:"
          kubectl logs -l app=shopping-service
          
          echo "Home Task Service Logs:"
          kubectl logs -l app=home-task-service
          
          # Verificar conectividade da rede
          echo "=== Network Connectivity Test ==="
          for pod in $(kubectl get pods -l 'app in (user-service,shopping-service,home-task-service)' -o name); do
            echo "Testing network from $pod:"
            kubectl exec $pod -- wget -qO- --timeout=2 http://localhost:3001/health || true
            kubectl exec $pod -- wget -qO- --timeout=2 http://localhost:3002/health || true
          done