name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_IMAGE: user-service
  DOCKER_TAG: latest

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./User_Service
  #   steps:
  #     - uses: actions/checkout@v2
      
  #     - name: Debug - Print Working Directory
  #       run: |
  #         pwd
  #         ls -la
  #         echo "Current directory structure:"
  #         tree -a
      
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '18'
          
  #     - name: Install dependencies
  #       run: npm ci
          
  #     - name: Run tests
  #       run: npm test

  build-and-push:
    # needs: test    # Comentado pois o job de teste está comentado
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Debug - Print Working Directory
        run: |
          pwd
          ls -la
          echo "Docker directory contents:"
          ls -la User_Service/docker/
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
          
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./User_Service
          file: ./User_Service/docker/Dockerfile.api
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
      
      - name: Set up Minikube
        uses: medyagh/setup-minikube@master
      
      - name: Deploy to Minikube
        run: |
          minikube start
          
          echo "Creating Docker credentials..."
          kubectl create secret docker-registry docker-credentials \
            --docker-server=https://index.docker.io/v1/ \
            --docker-username=${{ secrets.DOCKER_USERNAME }} \
            --docker-password=${{ secrets.DOCKER_PASSWORD }}
          
          echo "Applying PostgreSQL resources..."
          kubectl apply -f kubernetes/postgres-deployment.yaml
          kubectl apply -f kubernetes/postgres-service.yaml
          
          echo "Waiting for PostgreSQL to be ready..."
          kubectl wait --for=condition=ready pod -l app=postgres --timeout=300s
          
          echo "Checking PostgreSQL status..."
          kubectl get pods -l app=postgres
          PG_POD=$(kubectl get pod -l app=postgres -o jsonpath="{.items[0].metadata.name}")
          echo "PostgreSQL pod logs:"
          kubectl logs $PG_POD
          
          echo "Applying application resources..."
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml
          
          echo "Waiting for application to be ready..."
          kubectl wait --for=condition=ready pod -l app=user-service --timeout=300s
          
          echo "All resources status:"
          kubectl get all
          
          echo "Testing API endpoints..."
          MINIKUBE_IP=$(minikube ip)
          API_URL="http://$MINIKUBE_IP:30000"
          
          echo "1. Testing registration..."
          REGISTER_RESPONSE=$(curl -s -X POST "$API_URL/api/user" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "Test User",
              "email": "test@example.com",
              "password": "Test@123",
              "roles": "user"
            }')
          echo "Register Response: $REGISTER_RESPONSE"
          
          echo "2. Testing login..."
          LOGIN_RESPONSE=$(curl -s -X POST "$API_URL/api/user/login" \
            -H "Content-Type: application/json" \
            -d '{
              "email": "test@example.com",
              "password": "Test@123"
            }')
          echo "Login Response: $LOGIN_RESPONSE"
          
          # Extrair e verificar o token do caminho correto na resposta
          TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.data.token')
          if [ "$TOKEN" != "null" ] && [ "$TOKEN" != "" ]; then
            echo "✅ Login successful - Token received"
          else
            echo "❌ Login failed - No token received"
            exit 1
          fi
