name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_IMAGE: user-service
  DOCKER_TAG: latest
#teste
jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./User_Service
  #   steps:
  #     - uses: actions/checkout@v2
      
  #     - name: Debug - Print Working Directory
  #       run: |
  #         pwd
  #         ls -la
  #         echo "Current directory structure:"
  #         tree -a
      
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '18'
          
  #     - name: Install dependencies
  #       run: npm ci
          
  #     - name: Run tests
  #       run: npm test

  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service_dir: User_Service
            image_name: user-service
          - service_dir: Shopping_Service
            image_name: shopping-service
          - service_dir: Home_Task_Service
            image_name: home-task-service
    steps:
      - uses: actions/checkout@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: pereira6
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
          
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.service_dir }}
          push: true
          tags: pereira6/${{ matrix.image_name }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
      
      - name: Set up Minikube
        uses: medyagh/setup-minikube@master
      
      - name: Deploy to Minikube
        run: |
          minikube start
          
          # Apply ConfigMaps and Secrets first
          echo "Applying ConfigMaps and Secrets..."
          kubectl apply -f kubernetes/configmaps/
          kubectl apply -f kubernetes/secrets/
          
          # Deploy databases
          echo "Deploying databases..."
          kubectl apply -f kubernetes/user-service/postgres.yaml
          kubectl apply -f kubernetes/shopping-service/postgres.yaml
          kubectl apply -f kubernetes/home-task-service/postgres.yaml
          
          # Wait for databases with increased timeout
          echo "Waiting for databases to be ready..."
          kubectl wait --for=condition=ready pod -l app=postgres-user --timeout=300s
          kubectl wait --for=condition=ready pod -l app=postgres-shopping --timeout=300s
          kubectl wait --for=condition=ready pod -l app=postgres-hometask --timeout=300s
          
          # Deploy services
          echo "Deploying services..."
          kubectl apply -f kubernetes/user-service/deployment.yaml
          kubectl apply -f kubernetes/shopping-service/deployment.yaml
          kubectl apply -f kubernetes/home-task-service/deployment.yaml
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          kubectl wait --for=condition=ready pod -l app=user-service --timeout=300s
          kubectl wait --for=condition=ready pod -l app=shopping-service --timeout=300s
          kubectl wait --for=condition=ready pod -l app=home-task-service --timeout=300s
          
          # Show status
          echo "Deployment complete. Showing status:"
          kubectl get pods
          kubectl get services

      - name: Test Services
        run: |
          # Wait for services to stabilize
          echo "Waiting for services to stabilize..."
          sleep 60s
          
          # Get Minikube IP
          MINIKUBE_IP=$(minikube ip)
          echo "Minikube IP: ${MINIKUBE_IP}"
          
          echo "=== Testing User Service ==="
          # Register new user
          echo "1. Registering new user..."
          REGISTER_RESPONSE=$(curl -s -X POST "http://${MINIKUBE_IP}:30002/api/user" \
            -H "Content-Type: application/json" \
            -d '{"name": "Test User", "email": "test@example.com", "password": "Test123!", "roles": "Gestor"}')
          echo $REGISTER_RESPONSE | jq .
          
          # Login with new user
          echo "2. Logging in with new user..."
          LOGIN_RESPONSE=$(curl -s -X POST "http://${MINIKUBE_IP}:30002/api/user/login" \
            -H "Content-Type: application/json" \
            -d '{"email": "test@example.com", "password": "Test123!"}')
          TOKEN=$(echo $LOGIN_RESPONSE | jq -r '.token')
          echo $LOGIN_RESPONSE | jq .

          echo "=== Testing Shopping Service ==="
          echo "1. Creating item category..."
          CATEGORY_RESPONSE=$(curl -s -X POST "http://${MINIKUBE_IP}:30003/api/item-categories" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TOKEN}" \
            -d '{"description":"Groceries"}')
          echo "Category Response: $CATEGORY_RESPONSE"
          CATEGORY_ID=$(echo $CATEGORY_RESPONSE | jq -r '.data.shoppingItemCategory.id')

          echo "2. Creating shopping item..."
          ITEM_RESPONSE=$(curl -s -X POST "http://${MINIKUBE_IP}:30003/api/shopping-items" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${TOKEN}" \
            -d "{\"description\":\"Chocolate\",\"quantity\":2,\"shoppingListId\":1,\"itemCategoryId\":1,\"state\":\"ToDo\",\"price\":\"12.99\"}")
          echo "Item Response: $ITEM_RESPONSE"
          
  monitoring:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
      
      - name: Deploy Prometheus and Grafana
        run: |
          kubectl apply -f kubernetes/monitoring/prometheus-config.yaml
          kubectl apply -f kubernetes/monitoring/prometheus.yaml
          kubectl apply -f kubernetes/monitoring/grafana.yaml
          kubectl apply -f kubernetes/monitoring/grafana-dashboard.yaml
          
          kubectl wait --for=condition=ready pod -l app=prometheus --timeout=300s
          kubectl wait --for=condition=ready pod -l app=grafana --timeout=300s
          
          echo "Prometheus URL: $(minikube service prometheus --url)"
          echo "Grafana URL: $(minikube service grafana --url)"
          
      - name: Check Services Metrics
        run: |
          MINIKUBE_IP=$(minikube ip)
          
          echo "Collecting User Service metrics..."
          curl -s "http://${MINIKUBE_IP}:30002/metrics" > user_metrics.txt
          
          echo "Collecting Shopping Service metrics..."
          curl -s "http://${MINIKUBE_IP}:30003/metrics" > shopping_metrics.txt
          
          echo "Collecting Home Task Service metrics..."
          curl -s "http://${MINIKUBE_IP}:30000/metrics" > home_metrics.txt
          
      - name: Upload Metrics
        uses: actions/upload-artifact@v4
        with:
          name: service-metrics
          path: |
            user_metrics.txt
            shopping_metrics.txt
            home_metrics.txt
            
      - name: Monitor Services Status
        run: |
          echo "=== Services Status ==="
          kubectl get pods
          
          echo "=== Monitoring Tools Status ==="
          echo "Prometheus Status:"
          kubectl get pod -l app=prometheus -o jsonpath='{.items[0].status.phase}'
          
          echo "Grafana Status:"
          kubectl get pod -l app=grafana -o jsonpath='{.items[0].status.phase}'
          
      - name: Save Monitoring URLs
        run: |
          echo "Monitoring URLs:" > monitoring_urls.txt
          echo "Prometheus: $(minikube service prometheus --url)" >> monitoring_urls.txt
          echo "Grafana: $(minikube service grafana --url)" >> monitoring_urls.txt
          
      - name: Upload URLs
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-urls
          path: monitoring_urls.txt

