version: '3.8'
 
services:
  # API Service
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    image: ${DOCKER_USERNAME}/${DOCKER_IMAGE}:${DOCKER_TAG}
    pull_policy: build
    container_name: user-service-api
    ports:
      - "3000:3000"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    depends_on:
      - db-rel
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - app-network

  # Watchtower para atualização automática
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 api
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_LABEL_ENABLE=true
    networks:
      - app-network

  # PostgreSQL Database
  db-rel:
    build:
      context: .
      dockerfile: docker/Dockerfile.postgres
    container_name: db-rel-userAuth
    volumes:
      - rel-data:/var/lib/postgresql/data
    ports:
      - "5435:${DB_PORT}"
    networks:
      - app-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    networks:
      - app-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

volumes:
  rel-data:
  prometheus-data:
  grafana-data:

networks:
  app-network:
    driver: bridge